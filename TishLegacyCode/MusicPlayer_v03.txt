//There are two java classes, each one must be in its own file

package com.Games4Science.PluginUnityMusicPlayer;

import android.app.Activity;
import android.content.ClipData;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.List;

public class AudioPickerProxyActivity extends Activity {

    private static final String TAG = "[aar AUDIOPICKERPROXY]";
    private static final int REQUEST_CODE_PICK_AUDIO = 12345;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        boolean allowMultiple = getIntent().getBooleanExtra("allowMultiple", false);

        // Create the Intent to pick audio files
        Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);
        intent.setType("audio/*");
        intent.addCategory(Intent.CATEGORY_OPENABLE);
        intent.putExtra(Intent.EXTRA_LOCAL_ONLY, true);
        intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, allowMultiple);

        try {
            startActivityForResult(intent, REQUEST_CODE_PICK_AUDIO);
            Log.e(TAG, "File picker started (allowMultiple=" + allowMultiple + ")");
        } catch (Exception e) {
            Log.e(TAG, "Failed to launch file picker: " + e.getMessage());
            finish();
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {

        Log.e(TAG, "Calling super.onActivityResult(requestCode, resultCode, data)");

        super.onActivityResult(requestCode, resultCode, data);

        Log.e(TAG, "Done with super.onActivityResult(requestCode, resultCode, data)");

        List<String> pickedUris = new ArrayList<>();

        if (requestCode == REQUEST_CODE_PICK_AUDIO && resultCode == RESULT_OK && data != null) {
            ClipData clipData = data.getClipData();

            if (clipData != null) {
                // Multiple files selected
                for (int i = 0; i < clipData.getItemCount(); i++) {
                    Uri uri = clipData.getItemAt(i).getUri();
                    if (uri != null) pickedUris.add(uri.toString());
                }
            } else if (data.getData() != null) {
                // Single file selected
                pickedUris.add(data.getData().toString());
            }
        }

        // Send the result to MusicPlayer
        MusicPlayer.setPickedUris(pickedUris);

        // Close the proxy activity
        finish();
    }
}

package com.Games4Science.PluginUnityMusicPlayer;

import android.app.Activity;
import android.content.Intent;
import android.media.MediaPlayer;
import android.net.Uri;
import android.util.Log;

import com.unity3d.player.UnityPlayer;

import java.util.ArrayList;
import java.util.List;

public class MusicPlayer {

    private static final String TAG = "[aar MUSICPLAYER]";

    private static MediaPlayer mediaPlayer;
    private static List<String> lastPickedUris = new ArrayList<>();

    // --- MEDIA CONTROLS ---

    public static void Play(String path) {
        Stop();
        try {
            Activity activity = UnityPlayer.currentActivity;
            if (activity == null) {
                Log.e(TAG, "Play() failed: Unity activity is null!");
                return;
            }

            Uri uri = path.startsWith("content://") || path.startsWith("file://")
                    ? Uri.parse(path)
                    : Uri.parse("file://" + path);

            mediaPlayer = MediaPlayer.create(activity, uri);
            if (mediaPlayer != null) {
                mediaPlayer.start();
                Log.e(TAG, "Playing: " + path);
            } else {
                Log.e(TAG, "Failed to create MediaPlayer for: " + path);
            }
        } catch (Exception e) {
            Log.e(TAG, "Play error: " + e.getMessage());
        }
    }

    public static void Pause() {
        if (mediaPlayer != null && mediaPlayer.isPlaying()) {
            mediaPlayer.pause();
            Log.e(TAG, "Playback paused");
        }
    }

    public static void Resume() {
        if (mediaPlayer != null && !mediaPlayer.isPlaying()) {
            mediaPlayer.start();
            Log.e(TAG, "Playback resumed");
        }
    }

    public static void Stop() {
        if (mediaPlayer != null) {
            try { mediaPlayer.stop(); } catch (Exception ignored) {}
            mediaPlayer.release();
            mediaPlayer = null;
            Log.e(TAG, "Playback stopped and released");
        }
    }

    // --- AUDIO PICKER ---

    /**
     * Launch the proxy activity for picking audio files.
     * @param allowMultiple true to allow multiple selection
     */
    public static void PickAudioFile(boolean allowMultiple) {
        Activity activity = UnityPlayer.currentActivity;
        if (activity == null) {
            Log.e(TAG, "Unity activity is null, cannot launch file picker.");
            return;
        }

        try {
            Intent intent = new Intent(activity, AudioPickerProxyActivity.class);
            intent.putExtra("allowMultiple", allowMultiple);
            activity.startActivity(intent); // proxy handles result
            Log.e(TAG, "AudioPickerProxyActivity launched (allowMultiple=" + allowMultiple + ")");
        } catch (Exception e) {
            Log.e(TAG, "Failed to launch AudioPickerProxyActivity: " + e.getMessage());
        }
    }

    /**
     * Called internally by AudioPickerProxyActivity to send results to Unity
     */
    public static void setPickedUris(List<String> uris) {

        Log.e(TAG, "setPickedUris was started ");

        lastPickedUris.clear();
        for (String uri : uris) {
            if (uri != null) lastPickedUris.add(uri);
        }

        if (!lastPickedUris.isEmpty()) {
            String joined = String.join(";", lastPickedUris);
            Log.e(TAG, "Picked URIs: " + joined);

            // Ensure call on main thread
            Activity activity = UnityPlayer.currentActivity;
            if (activity != null) {
                activity.runOnUiThread(() ->
                        UnityPlayer.UnitySendMessage("MusicManager", "OnFilePicked", joined)
                );
            }
        }
    }

    // --- DATA ACCESSORS ---

    public static String GetLastPickedUri() {
        return lastPickedUris.isEmpty() ? null : lastPickedUris.get(0);
    }

    public static String GetAllPickedUris() {
        return String.join(";", lastPickedUris);
    }

    public static void ClearLastPickedUris() {
        lastPickedUris.clear();
        Log.e(TAG, "Cleared last picked URIs");
    }
}